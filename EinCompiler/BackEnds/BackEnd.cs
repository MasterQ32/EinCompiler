using System;
using System.Globalization;
using System.IO;

namespace EinCompiler.BackEnds
{
	public abstract class BackEnd
	{
		private TextWriter writer;
		private int indent = 0;
		private bool beginOfLine = true;

		public void IncreaseIndentation() => indent++;
		public void DecreaseIndentation() => indent--;
		public void ResetIndentation() => indent = 0;

		public static void GenerateCode<T>(ModuleDescription module, TextWriter code)
			where T : BackEnd, new()
		{
			GenerateCode (new T (), module, code);
		}

		public static void GenerateCode(BackEnd generator, ModuleDescription module, TextWriter code)
		{
			generator.writer = code;

			generator.WriteLineComment("============================================================================");
			generator.WriteLineComment($"Code generated by EinCompiler.");
			generator.WriteLineComment($"Generator: {generator.GetType().Name}");
			generator.WriteLineComment($"Date:      {DateTime.Now.ToString(CultureInfo.InvariantCulture)}.");
			generator.WriteLineComment("============================================================================");

			generator.WriteLine();

			generator.Generate(module);
		}

		protected void WriteIndent()
		{
			if (beginOfLine)
				this.writer.Write(new string(IndentChar, indent));
			beginOfLine = false;
		}

		protected abstract void WriteLineComment(string text);

		protected void WriteLine()
		{
			WriteIndent();
			this.writer.WriteLine();
			beginOfLine = true;
		}

		protected void WriteLine(string str)
		{
			WriteIndent();
			this.writer.WriteLine(str);
			beginOfLine = true;
		}

		protected void WriteLine(string fmt, params object[] args)
		{
			WriteIndent();
			this.writer.WriteLine(string.Format(CultureInfo.InvariantCulture, fmt, args));
			beginOfLine = true;
		}

		protected void Write(string str)
		{
			WriteIndent();
			this.writer.Write(str);
		}

		protected void Write(string fmt, params object[] args)
		{
			WriteIndent();
			this.writer.Write(string.Format(CultureInfo.InvariantCulture, fmt, args));
		}

		protected TextWriter Code => this.writer;

		protected abstract void Generate(ModuleDescription module);

		public virtual char IndentChar => '\t';
	}
}