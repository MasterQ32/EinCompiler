var scalar : int;
var array  : int[10];

static var staticInt : int := 10;

const PI : int := 3141;

private        var variable4 : int; // one per instance
static         var variable5 : int; // one per thread
private static var variable6 : int; // one per instance and thread
global         var variable7 : int; // one per process (default)
shared         var variable8 : int; // one per executing system

fn looptest()
{
	var i : int := 10;
	while((i := i - 1) != 0)
	{
		
	}
}

fn arrtest(b : int[])
{
	var a : int[] := b;
	var i : int;

	i := a[10];
	i := b[10];
}

fn testloc() -> int 
{
	var a : int := 10;
	var b : int := 20;
	var c : int := a + b;
	return c;
}

fn main() -> int
{
	var i : int;
	scalar := 'A';
	putc(scalar);
	putc(' ');
	puti(scalar);

	scalar := 1;

	array[0]      := 10;
	array[scalar] := 20;

	putc(' ');
	puti(array[0]);
	putc(' ');
	puti(array[scalar]);
	putc(' ');
	putc('B');
	putc('\n');
}

fn test_expressions()
{
	var x : int;
	var a : int;
	x := 1; 
	x := a; 
	x := 1 + 2;
	x := a + 1;
	x := 1 + a;
	x := a + a;
	x := 1 + 2 + 3;
	x := 1 * 2 + 3;
	x := 1 + 2 * 3;
	x := (1);
	x := (a);
	x := (1 + 2);
	x := (1 * (2 + 3));
	x := (1 * (2 - (3 + 4)));
	x := 1 = 2;
	x := 1 != 2;
	x := 1 >= 2;
	x := 1 > 2;
	x := 1 <= 2;
	x := 1 < 2;
}

fn test_return() -> int
{
	var i : int;
	return i * i;
}

fn test_if()
{
	var i : int;
	var x : int;
	if(1 + 2)
	{
		i := x;
		i := x;
	}

	if(1 + 2)
	{
		i := x;
		i := x;
	}
	else
	{
		i := x;
	}
}

fn test_while()
{
	var i : int;
	var x : int;

	while (i * i)
	{
		i := x;
		i := 10 * 10;
	}

	while(i * i)
	{
		break;
	}
}


fn test_call()
{
	var i : int;
	sum(10, 5 + 5);
	i := sum(10, 5 + 5);
}

export fn sum(a : int, b : int) -> int
{
	return a + b;
}

fn square(i : int) -> int
{
	return i * i;
}


/**
 * Unoptimized string printing
 */
export fn print_str(str : ptr)
{
	while (1)
	{
		var c : int := read8(str);
		if (c = 0) {
			break;
		}
		putc(c);
		str := str + 1;
	}
}

// Module Support planned:
// import "";
// import "" as name;