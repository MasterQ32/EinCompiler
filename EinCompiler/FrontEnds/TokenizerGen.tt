<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ // Start of class feature control block.
void GenerateTokenizer(string language, string file)
{
#>
namespace EinCompiler.FrontEnds
{
	using System.Text.RegularExpressions;
	public sealed class <#= language #>Tokenizer : Tokenizer
	{
		public <#= language #>Tokenizer()
		{
<#+
	var tokenizerFormat = new Regex(@"^(?<key>\w+)(?:\((?<options>\w+(?:,\w+)*)\))?\s*:=\s*(?<value>.*?)\s*$", RegexOptions.Compiled);
	var definitions = File.ReadAllLines(file);
	var tokenNames = new HashSet<string>();
	for (int i = 0; i < definitions.Length; i++)
	{
		var match = tokenizerFormat.Match(definitions[i]);
		if (match.Success == false)
			continue;
		var name = match.Groups["key"].Value.ToUpper();
		var options = match.Groups["options"].Value.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
		var regextext = match.Groups["value"].Value;
		var emitted = true;
		var optionlist = new HashSet<string>();

		RegexOptions regexoptions = RegexOptions.Compiled;
		foreach(var option in options)
		{
			if (option == "noemit")
			{
				emitted = false;
				continue;
			}
			var value = (RegexOptions)Enum.Parse(typeof(RegexOptions), option, true);
			regexoptions |= value;
			optionlist.Add(value.ToString());
		}

		tokenNames.Add(name);

		var regex = new Regex(regextext, regexoptions);

		if(optionlist.Count == 0)
			optionlist.Add("None");

		#>
			this.Add(<#= language #>Tokens.<#= name #>, new Regex(@"<#= regextext.Replace("\"", "\"\"") #>", <#= string.Join(" | ", optionlist.Select(o => "RegexOptions." + o)) #>));
<#+

		/*
		var token = new TokenType(name, regex)
		{
			Emitted = emitted,
		};
		tokenizer.Add(token);
		*/
	}
#>
		}
	}

	public static class <#= language #>Tokens
	{
<#+
		foreach(var name in tokenNames) {
#>		public static readonly string <#= name #> = "<#= name #>";
<#+
		}
		#>
	}
}
<#+
}
#>